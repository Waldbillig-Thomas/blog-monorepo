# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AffectedRows {
  count: Int!
}

type Author {
  createdAt: DateTime!
  email: String!
  firstName: String!
  gender: Gender!
  id: ID!
  lastName: String!
  posts: [Post!]
  updatedAt: DateTime!
}

type AuthorCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  gender: Int!
  id: Int!
  lastName: Int!
  updatedAt: Int!
}

input AuthorCountAggregateInput {
  _all: Boolean
  createdAt: Boolean
  email: Boolean
  firstName: Boolean
  gender: Boolean
  id: Boolean
  lastName: Boolean
  updatedAt: Boolean
}

input AuthorCreateInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: Gender!
  id: String
  lastName: String!
  posts: PostCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input AuthorCreateManyInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: Gender!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input AuthorCreateNestedOneWithoutPostsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutPostsInput
  create: AuthorCreateWithoutPostsInput
}

input AuthorCreateOrConnectWithoutPostsInput {
  create: AuthorCreateWithoutPostsInput!
  where: AuthorWhereUniqueInput!
}

input AuthorCreateWithoutPostsInput {
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: Gender!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input AuthorMaxAggregateInput {
  createdAt: Boolean
  email: Boolean
  firstName: Boolean
  gender: Boolean
  id: Boolean
  lastName: Boolean
  updatedAt: Boolean
}

input AuthorMinAggregateInput {
  createdAt: Boolean
  email: Boolean
  firstName: Boolean
  gender: Boolean
  id: Boolean
  lastName: Boolean
  updatedAt: Boolean
}

input AuthorOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

input AuthorRelationFilter {
  is: AuthorWhereInput
  isNot: AuthorWhereInput
}

enum AuthorScalarFieldEnum {
  createdAt
  email
  firstName
  gender
  id
  lastName
  updatedAt
}

input AuthorUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: EnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: EnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpdateOneRequiredWithoutPostsInput {
  connect: AuthorWhereUniqueInput
  connectOrCreate: AuthorCreateOrConnectWithoutPostsInput
  create: AuthorCreateWithoutPostsInput
  update: AuthorUpdateWithoutPostsInput
  upsert: AuthorUpsertWithoutPostsInput
}

input AuthorUpdateWithoutPostsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: EnumGenderFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AuthorUpsertWithoutPostsInput {
  create: AuthorCreateWithoutPostsInput!
  update: AuthorUpdateWithoutPostsInput!
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  gender: EnumGenderFilter
  id: StringFilter
  lastName: StringFilter
  posts: PostListRelationFilter
  updatedAt: DateTimeFilter
}

input AuthorWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumGenderFieldUpdateOperationsInput {
  set: Gender
}

input EnumGenderFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderFilter
  notIn: [Gender!]
}

enum Gender {
  FEMALE
  MALE
}

type Mutation {
  AuthorCreate(data: AuthorCreateInput!): Author!
  AuthorCreateMany(data: [AuthorCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows!
  AuthorDelete(where: AuthorWhereUniqueInput!): Author!
  AuthorDeleteMany(where: AuthorWhereInput): AffectedRows!
  AuthorUpdate(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  AuthorUpdateMany(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): AffectedRows!
  AuthorUpsert(create: AuthorCreateInput!, update: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  PostCreate(data: PostCreateInput!): Post!
  PostCreateMany(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRows!
  PostDelete(where: PostWhereUniqueInput!): Post!
  PostDeleteMany(where: PostWhereInput): AffectedRows!
  PostUpdate(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  PostUpdateMany(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRows!
  PostUpsert(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumGenderFilter {
  equals: Gender
  in: [Gender!]
  not: NestedEnumGenderFilter
  notIn: [Gender!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Pagination {
  pageIndex: Int!
  pageSize: Int!
  total: Int!
}

type Post {
  author: Author!
  authorId: String!
  content: String!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

type PostCountAggregate {
  _all: Int!
  authorId: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  title: Int!
  updatedAt: Int!
}

input PostCountAggregateInput {
  _all: Boolean
  authorId: Boolean
  content: Boolean
  createdAt: Boolean
  id: Boolean
  title: Boolean
  updatedAt: Boolean
}

input PostCreateInput {
  author: AuthorCreateNestedOneWithoutPostsInput!
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyInput {
  authorId: String!
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostCreateNestedManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
}

input PostCreateOrConnectWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostMaxAggregateInput {
  authorId: Boolean
  content: Boolean
  createdAt: Boolean
  id: Boolean
  title: Boolean
  updatedAt: Boolean
}

input PostMinAggregateInput {
  authorId: Boolean
  content: Boolean
  createdAt: Boolean
  id: Boolean
  title: Boolean
  updatedAt: Boolean
}

input PostOrderByInput {
  authorId: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  content
  createdAt
  id
  title
  updatedAt
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostUpdateInput {
  author: AuthorUpdateOneRequiredWithoutPostsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpdateWithoutAuthorInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: AuthorRelationFilter
  authorId: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query {
  AuthorAggregate(_count: AuthorCountAggregateInput, _max: AuthorMaxAggregateInput, _min: AuthorMinAggregateInput, cursor: AuthorWhereUniqueInput, orderBy: [AuthorOrderByInput!], skip: Int, take: Int, where: AuthorWhereInput): AuthorCountAggregate!
  AuthorCount(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByInput!], skip: Int, take: Int, where: AuthorWhereInput): Int!
  AuthorFindFirst(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByInput!], skip: Int, take: Int, where: AuthorWhereInput): Author!
  AuthorFindMany(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByInput!], skip: Int, take: Int, where: AuthorWhereInput): [Author!]!
  AuthorFindUnique(where: AuthorWhereUniqueInput!): Author!
  AuthorPagination(cursor: AuthorWhereUniqueInput, distinct: [AuthorScalarFieldEnum!], orderBy: [AuthorOrderByInput!], skip: Int, take: Int, where: AuthorWhereInput): Pagination!
  PostAggregate(_count: PostCountAggregateInput, _max: PostMaxAggregateInput, _min: PostMinAggregateInput, cursor: PostWhereUniqueInput, orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): PostCountAggregate!
  PostFindFirst(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): Post!
  PostFindMany(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  PostFindUnique(where: PostWhereUniqueInput!): Post!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
